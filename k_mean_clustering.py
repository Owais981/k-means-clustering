# -*- coding: utf-8 -*-
"""k mean clustering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nC79NjO9tn-m8Xh3SzAbX_PdNnBNeXTF

**Import Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

"""***Load Dataset ***"""

df = pd.read_csv('/content/4) house Prediction Data Set.csv', delim_whitespace=True)
print("Dataset loaded successfully!")
print("Shape after loading:", df.shape)
df.head()

"""**Handle Missing Values**"""

print("Missing values per column:")
print(df.isnull().sum())
df.dropna(inplace=True)
print("Shape after dropping nulls:", df.shape)

"""**Encode Categorical Columns**"""

label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le
print("Categorical columns encoded.")

"""**Feature Scaling**"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df)

"""**Elbow Method to Determine Optimal K**"""

inertia = []
K_range = range(1, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia (WCSS)')
plt.title('Elbow Method to Determine Optimal K')
plt.grid(True)
plt.show()

"""** Apply KMeans with Selected K (choose based on Elbow)**"""

optimal_k = 3  # Change this based on elbow curve
kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
df['Cluster'] = kmeans.fit_predict(X_scaled)

print(f"KMeans applied with K={optimal_k}. Cluster labels added.")
df.head()

""" **Visualize Clusters Using PCA (2D Projection)**"""

# Add the 'Cluster' column after KMeans
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Drop the original unnamed column
df = df.drop(df.columns[0], axis=1)

# Reapply scaling after dropping the column
X_scaled = scaler.fit_transform(df.drop('Cluster', axis=1))

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=df['Cluster'], palette='Set2', s=60)
plt.title(f'K-Means Clustering (K={optimal_k}) - PCA 2D Projection')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()